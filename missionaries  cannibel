from collections import deque

def is_valid_state(m, c, total_missionaries, total_cannibals):
    return (0 <= m <= total_missionaries) and (0 <= c <= total_cannibals) and \
           (m == 0 or m >= c) and (total_missionaries - m == 0 or total_missionaries - m >= total_cannibals - c)

def get_neighbors(state, total_missionaries, total_cannibals):
    m_left, c_left, boat = state
    neighbors = []
    
    if boat == 1:  # Boat is on the left side
        for m_move in range(3):
            for c_move in range(3):
                if (m_move + c_move) in [1, 2]:  # Boat can carry at most two people
                    new_m_left = m_left - m_move
                    new_c_left = c_left - c_move
                    new_m_right = total_missionaries - new_m_left
                    new_c_right = total_cannibals - new_c_left
                    if is_valid_state(new_m_left, new_c_left, total_missionaries, total_cannibals):
                        neighbors.append((new_m_left, new_c_left, 0))
    else:  # Boat is on the right side
        for m_move in range(3):
            for c_move in range(3):
                if (m_move + c_move) in [1, 2]:  # Boat can carry at most two people
                    new_m_left = m_left + m_move
                    new_c_left = c_left + c_move
                    new_m_right = total_missionaries - new_m_left
                    new_c_right = total_cannibals - new_c_left
                    if is_valid_state(new_m_left, new_c_left, total_missionaries, total_cannibals):
                        neighbors.append((new_m_left, new_c_left, 1))
    
    return neighbors

def bfs(total_missionaries, total_cannibals):
    initial_state = (total_missionaries, total_cannibals, 1)  # (missionaries_left, cannibals_left, boat_position)
    goal_state = (0, 0, 0)
    
    visited = set()
    queue = deque([(initial_state, [])])
    visited.add(initial_state)
    
    while queue:
        (current_state, path) = queue.popleft()
        
        if current_state == goal_state:
            return path + [current_state]
        
        for neighbor in get_neighbors(current_state, total_missionaries, total_cannibals):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [current_state]))
    
    return None

def print_solution(solution):
    if solution:
        print("Solution steps:")
        for state in solution:
            m_left, c_left, boat = state
            print(f"Left side: {m_left} missionaries, {c_left} cannibals | Boat on {'left' if boat == 1 else 'right'}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    total_missionaries = int(input("Enter the total number of missionaries: "))
    total_cannibals = int(input("Enter the total number of cannibals: "))
    
    if total_missionaries < 0 or total_cannibals < 0:
        print("The number of missionaries and cannibals cannot be negative.")
    elif total_missionaries < total_cannibals:
        print("There must be at least as many missionaries as cannibals on either side of the river to avoid them being eaten.")
    else:
        solution = bfs(total_missionaries, total_cannibals)
        print_solution(solution)
