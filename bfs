from collections import deque

def bfs(graph, start, target):
    # Queue for BFS
    queue = deque([(start, [start])])
    # Set to keep track of visited nodes
    visited = set()
    visited.add(start)
    
    while queue:
        # Dequeue a node and its path
        current_node, path = queue.popleft()
        
        # Check if we've reached the target
        if current_node == target:
            return path
        
        # Enqueue all adjacent nodes that haven't been visited
        for neighbor in graph.get(current_node, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))
    
    return None  # Return None if no path is found

# Example usage
if __name__ == "__main__":
    # Define the graph as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    
    start_node = 'A'
    target_node = 'F'
    
    path = bfs(graph, start_node, target_node)
    
    if path:
        print(f"Path from {start_node} to {target_node}: {' -> '.join(path)}")
    else:
        print(f"No path found from {start_node} to {target_node}.")
