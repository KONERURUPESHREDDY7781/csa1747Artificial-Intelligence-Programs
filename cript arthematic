from itertools import permutations

def is_valid(mapping):
    """Check if the current mapping of letters to digits is valid for the equation SEND + MORE = MONEY."""
    send = int(''.join(str(mapping[char]) for char in 'SEND'))
    more = int(''.join(str(mapping[char]) for char in 'MORE'))
    money = int(''.join(str(mapping[char]) for char in 'MONEY'))
    return send + more == money

def solve_cryptarithm():
    # Define the letters in the problem
    letters = 'SENDMORE MONEY'
    unique_letters = set(letters.replace(' ', ''))

    # Ensure there are only 10 unique letters, otherwise it's not solvable with unique digits 0-9
    if len(unique_letters) > 10:
        raise ValueError("Too many unique letters for digit substitution.")

    # Generate all permutations of digits for these letters
    for perm in permutations(range(10), len(unique_letters)):
        mapping = dict(zip(unique_letters, perm))

        # Ensure the first letter of each word is not zero (to avoid invalid numbers)
        if mapping['S'] == 0 or mapping['M'] == 0:
            continue
        
        if is_valid(mapping):
            return mapping

    return None

solution = solve_cryptarithm()

if solution:
    print("Solution found:")
    for char, digit in solution.items():
        print(f"{char} = {digit}")
else:
    print("No solution found.")

